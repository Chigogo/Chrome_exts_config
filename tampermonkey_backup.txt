{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"解决百度云大文件下载限制","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["http://pan.baidu.com/*","https://pan.baidu.com/*","http://yun.baidu.com/*","https://yun.baidu.com/*","https://eyun.baidu.com/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1480554644284,"data":{}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/17800-%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%99%90%E5%88%B6/code/%E8%A7%A3%E5%86%B3%E7%99%BE%E5%BA%A6%E4%BA%91%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E9%99%90%E5%88%B6.user.js","uuid":"3d782ff5-aa8f-4f01-a1e1-cf349ceefd4e","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDop6PlhrPnmb7luqbkupHlpKfmlofku7bkuIvovb3pmZDliLYKLy8gQG5hbWVzcGFjZSAgICB1bmRlZmluZWQKLy8gQHZlcnNpb24gICAgICAwLjAuNgovLyBAZGVzY3JpcHRpb24gIOS4gOihjOS7o+egge+8jOino+WGs+eZvuW6puS6keWkp+aWh+S7tuS4i+i9vemZkOWItgovLyBAYXV0aG9yICAgICAgIGZ1bmlhbnd1eGluCi8vIEBtYXRjaCAgICAgICAgaHR0cDovL3Bhbi5iYWlkdS5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vcGFuLmJhaWR1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgaHR0cDovL3l1bi5iYWlkdS5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8veXVuLmJhaWR1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9leXVuLmJhaWR1LmNvbS8qCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQovKiBqc2hpbnQgLVcwOTcgKi8KJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdC5nZXRQcm90b3R5cGVPZihuYXZpZ2F0b3IpLCdwbGF0Zm9ybScse2dldDpmdW5jdGlvbigpe3JldHVybiAnc2JfYmFpZHUnO319KQoKCihmdW5jdGlvbigpewp2YXIgaHJlZj1sb2NhdGlvbi5ocmVmOwovaHR0cDovLnRlc3QoaHJlZik/bG9jYXRpb24uaHJlZj0naHR0cHMnK2hyZWYuc2xpY2UoNCk6MDsKfSgpKTsKCgogICAg"},{"name":"Google: Bypass Result Page Redirect","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/^https?://(?:encrypted|www)\\.google\\.[^/]+/(?:$|[#?]|search|webhp|imgres)/"],"orig_matches":["https://news.google.com/*","https://cse.google.com/cse/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1480555257633,"data":{}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/14150-google-%E7%BB%95%E8%BF%87%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%BD%91%E9%A1%B5%E9%93%BE%E6%8E%A5%E9%87%8D%E5%AE%9A%E5%90%91/code/Google%EF%BC%9A%E7%BB%95%E8%BF%87%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%BD%91%E9%A1%B5%E9%93%BE%E6%8E%A5%E9%87%8D%E5%AE%9A%E5%90%91.user.js","uuid":"a31952f9-536b-4c35-ac7c-4c6bfe2ed3e7","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWVzcGFjZSAgIFZBX2kKLy8gQHZlcnNpb24gICAgIDUuMC4yLjIwMTYwNTAzCi8vIEBncmFudCAgICAgICBub25lCi8vIEBpbmNsdWRlICAgICAvXmh0dHBzPzovLyg/OmVuY3J5cHRlZHx3d3cpXC5nb29nbGVcLlteL10rLyg/OiR8WyM/XXxzZWFyY2h8d2ViaHB8aW1ncmVzKS8KLy8gQG1hdGNoICAgICAgIGh0dHBzOi8vbmV3cy5nb29nbGUuY29tLyoKLy8gQG1hdGNoICAgICAgIGh0dHBzOi8vY3NlLmdvb2dsZS5jb20vY3NlLyoKLy8gQHJ1bi1hdCAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vIEBuYW1lICAgICAgICBHb29nbGU6IEJ5cGFzcyBSZXN1bHQgUGFnZSBSZWRpcmVjdAovLyBAbmFtZTp6aC1DTiAgR29vZ2xl77ya57uV6L+H5pCc57Si57uT5p6c572R6aG16ZO+5o6l6YeN5a6a5ZCRCi8vIEBuYW1lOnpoLVRXICBHb29nbGXvvJrnuZ7pgY7mkJzlsIvntZDmnpzntrLpoIHpj4jmjqXph43lrprlkJEKLy8gQGRlc2NyaXB0aW9uIEF2b2lkIEdvb2dsZSByZWRpcmVjdCBmb3Igc2VhcmNoIHJlc3VsdCBwYWdlcy4KLy8gQGRlc2NyaXB0aW9uOnpoLUNOIOS7pCBHb29nbGUg55u05o6l6ZO+5o6l6Iez5pCc57Si57uT5p6c572R6aG177yM5peg6aG76YeN5a6a5ZCR44CCCi8vIEBkZXNjcmlwdGlvbjp6aC1UVyDku6QgR29vZ2xlIOebtOaOpemPiOaOpeiHs+aQnOWwi+e1kOaenOe2sumgge+8jOeEoemgiOmHjeWumuWQkeOAggovLyA9PS9Vc2VyU2NyaXB0PT0KCnZhciBkZWJ1ZyA9IGZhbHNlOwp2YXIgY291bnQgPSAwOwoKLy8gd2ViIHBhZ2VzOiB1cmw/dXJsPQovLyBjdXN0b20gc2VhcmNoIGVuZ2luZTogdXJsP3E9CnZhciByZSA9IC9cYnVybFw/Lio/XGIoPzp1cmx8cSk9KGh0dHBzP1xiW14mI10rKS9pOwp2YXIgcmVzdG9yZSA9IGZ1bmN0aW9uIChsaW5rLCB1cmwpIHsKICB1cmwgPSB1cmwgfHwgbGluay5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSB8fCAnJzsKICB2YXIgbWF0Y2hlcyA9IHVybC5tYXRjaChyZSk7CiAgbGluay5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBtYXRjaGVzID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoZXNbMV0pIDogdXJsKTsKfTsKCnZhciBmYWtlTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKdmFyIG5vcm1hbGl6ZVVybCA9IGZ1bmN0aW9uICh1cmwpIHsKICBmYWtlTGluay5ocmVmID0gdXJsOwogIHJldHVybiBmYWtlTGluay5ocmVmOwp9OwoKdmFyIHNldHRlciA9IGZ1bmN0aW9uICh2KSB7CiAgdiA9IFN0cmluZyh2KTsgIC8vIGluIGNhc2UgYW4gb2JqZWN0IGlzIHBhc3NlZCBieSBjbGV2ZXIgR29vZ2xlCiAgZGVidWcgJiYgY29uc29sZS5sb2coJ3NldCcsIHRoaXMuX3hfaWQsIHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJyksIHYpOwogIHJlc3RvcmUodGhpcywgdik7Cn07CnZhciBnZXR0ZXIgPSBmdW5jdGlvbiAoKSB7CiAgZGVidWcgJiYgY29uc29sZS5sb2coJ2dldCcsIHRoaXMuX3hfaWQsIHRoaXMuZ2V0QXR0cmlidXRlKCdocmVmJykpOwogIHJldHVybiBub3JtYWxpemVVcmwodGhpcy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSk7Cn07CnZhciBibG9ja2VyID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7CiAgcmVzdG9yZSh0aGlzKTsKICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnYmxvY2snLCB0aGlzLl94X2lkLCB0aGlzLmdldEF0dHJpYnV0ZSgnaHJlZicpKTsKfTsKCnZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGEpIHsKICBpZiAoYS5feF9pZCkgewogICAgcmV0dXJuOwogIH0KICBhLl94X2lkID0gZGVidWcgPyArK2NvdW50IDogdHJ1ZTsKICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7CiAgICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnZGVmaW5lIHByb3BlcnR5JywgYS5feF9pZCk7CiAgICByZXN0b3JlKGEpOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsICdocmVmJywge2dldDogZ2V0dGVyLCBzZXQ6IHNldHRlcn0pOwogIH0gZWxzZSBpZiAoYS5fX2RlZmluZVNldHRlcl9fKSB7CiAgICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnZGVmaW5lIGdldHRlcicsIGEuX3hfaWQpOwogICAgcmVzdG9yZShhKTsKICAgIGEuX19kZWZpbmVTZXR0ZXJfXygnaHJlZicsIHNldHRlcik7CiAgICBhLl9fZGVmaW5lR2V0dGVyX18oJ2hyZWYnLCBnZXR0ZXIpOwogIH0gZWxzZSB7CiAgICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnZGVmaW5lIGxpc3RlbmVyJywgYS5feF9pZCk7CiAgICByZXN0b3JlKGEpOwogICAgYS5vbm1vdXNlZW50ZXIgPSBhLm9ubW91c2Vtb3ZlID0gYS5vbm1vdXNldXAgPSBhLm9ubW91c2Vkb3duID0KICAgICAgYS5vbmRiY2xpY2sgPSBhLm9uY2xpY2sgPSBhLm9uY29udGV4dG1lbnUgPSBibG9ja2VyOwogIH0KfTsKCnZhciB1cGRhdGUgPSBmdW5jdGlvbiAoKSB7CiAgW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWZdJykpLmZvckVhY2goaGFuZGxlcik7Cn07Cgp2YXIgdGlkID0gbnVsbDsKdmFyIHByZXYgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpOwp2YXIgY2hlY2sgPSBmdW5jdGlvbiAobXV0YXRpb24pIHsKICByZXR1cm4gbXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGggPiAwOwp9Owp2YXIgY2hlY2tOZXdOb2RlcyA9IGZ1bmN0aW9uIChtdXRhdGlvbnMpIHsKICBtdXRhdGlvbnMuZm9yRWFjaCAmJiBtdXRhdGlvbnMuZm9yRWFjaChjaGVja0F0dHJpYnV0ZSk7CiAgdmFyIG5leHQgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpOwogIGlmIChuZXh0IC0gcHJldiA+IDEwMDApIHsgIC8vIERvbid0IGxldCBtZSB3YWl0IHRvbyBsb25nLgogICAgcHJldiA9IG5leHQ7CiAgICBjbGVhclRpbWVvdXQodGlkKTsKICAgIHVwZGF0ZSgpOyAgLy8gVGhyb3R0bGUgaXMgd2hhdD8KICB9IGVsc2UgaWYgKCFtdXRhdGlvbnMuc29tZSB8fCBtdXRhdGlvbnMuc29tZShjaGVjaykpIHsKICAgIGNsZWFyVGltZW91dCh0aWQpOwogICAgdGlkID0gc2V0VGltZW91dCh1cGRhdGUsIDIwMCk7CiAgfQp9Owp2YXIgY2hlY2tBdHRyaWJ1dGUgPSBmdW5jdGlvbiAobXV0YXRpb24pIHsKICB2YXIgdGFyZ2V0ID0gbXV0YXRpb24udGFyZ2V0OwogIGlmICh0YXJnZXQgJiYgdGFyZ2V0Lm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdBJyAmJgogICAgICAobXV0YXRpb24uYXR0cmlidXRlTmFtZSB8fCBtdXRhdGlvbi5hdHRyTmFtZSkgPT09ICdocmVmJyAmJgogICAgICByZS50ZXN0KHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkpIHsKICAgIGRlYnVnICYmIGNvbnNvbGUubG9nKCdyZXN0b3JlIGF0dHJpYnV0ZScsIHRhcmdldC5feF9pZCwgdGFyZ2V0LmdldEF0dHJpYnV0ZSgnaHJlZicpKTsKICAgIHJlc3RvcmUodGFyZ2V0KTsKICB9Cn07Cgp2YXIgTXV0YXRpb25PYnNlcnZlciA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyOwoKaWYgKE11dGF0aW9uT2JzZXJ2ZXIpIHsKICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnTXV0YXRpb25PYnNlcnZlcjogdHJ1ZScpOwogIG5ldyBNdXRhdGlvbk9ic2VydmVyKGNoZWNrTmV3Tm9kZXMpLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7CiAgICBjaGlsZExpc3Q6IHRydWUsCiAgICBhdHRyaWJ1dGVzOiB0cnVlLAogICAgYXR0cmlidXRlRmlsdGVyOiBbJ2hyZWYnXSwKICAgIHN1YnRyZWU6IHRydWUKICB9KTsKfSBlbHNlIHsKICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnTXV0YXRpb25FdmVudDogdHJ1ZScpOwogIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUF0dHJNb2RpZmllZCcsIGNoZWNrQXR0cmlidXRlLCBmYWxzZSk7CiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NTm9kZUluc2VydGVkJywgY2hlY2tOZXdOb2RlcywgZmFsc2UpOwp9"},{"name":"百度云插件+APIKey","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/https?\\:\\/\\/(pan|yun)\\.baidu\\.com.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":["googleapis.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1480555634437,"data":{}},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/496-%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6-apikey/code/%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6+APIKey.user.js","uuid":"6690c28b-8506-4bc5-8611-76c164755bf7","source":""},{"name":"YouTube +","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://www.youtube.com/tv*","*://www.youtube.com/embed/*","*://www.youtube.com/live_chat*"],"orig_includes":[],"orig_matches":["*://www.youtube.com/*"],"orig_noframes":true,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"data":{"particleSettings":"s{\"GEN_BTTR_NTF\":true,\"GEN_SUB_LIST\":true,\"GEN_INF_SCRL\":true,\"GEN_BLUE_GLOW\":true,\"GEN_PPOT_ON\":true,\"VID_END_SHRE\":true,\"VID_DFLT_QLTY\":\"auto\",\"VID_PLST_ATPL\":true,\"VID_PLST_RVRS\":true,\"VID_PLR_ATPL\":true,\"VID_PLR_ALVIS\":true,\"VID_PLR_SIZE_MEM\":true,\"VID_PLR_VOL_LDN\":true,\"VID_POST_TIME\":true,\"VID_VID_CNT\":true,\"VID_DESC_SHRT\":true,\"VID_PPOT_SZ\":533,\"VID_PLR_HTML5\":true,\"BLK_ON\":true,\"floaterX\":2000,\"floaterY\":2000,\"firstTime\":false,\"volLev\":50,\"advOpts\":true,\"blacklist\":{\"UCPgRPAzeQg1UL8w_M2VN97Q\":\"禁书网\",\"UC2mLqX_IavAs3TPK3GNlzAw\":\"中国內幕\",\"UCt5zpwa264A0B-gaYtv1IpA\":\"美国之音中文网\",\"UCDrj0cP9ZQ7R9Qq_kZPpjKA\":\"NTDChinaNewsChannel\",\"UCfb1VoSCsIS7kIXMTYNhvXw\":\"中國觀察\",\"UClAHEcSSQa5aql2i81U8Idw\":\"江泽民丑行录\",\"UCdbvc-yJ4JQjNGTgFiJIZNA\":\"NTDCHINESE\",\"UCYSHqbSBDD0X3NC-ze8z5xQ\":\"ntdtvchinese2\"},\"extLang\":{\"zh_CN\":{\"YTSETS\":\"YouTube+ 设置\",\"ADV_OPTS\":\"高级选项\",\"SUB_PLST\":\"播放最新上传的内容\",\"PPOT_OPEN\":\"在弹出窗口中打开\",\"BLCK_ADD\":\"添加到黑名单\",\"BLCK_EDIT\":\"编辑\",\"BLCK_SAVE\":\"保存\",\"BLCK_CLSE\":\"关闭\",\"CNSL_AP\":\"自动播放\",\"CNSL_RPT\":\"循环播放\",\"CNSL_SVTH\":\"打开缩略图\",\"CNSL_SS\":\"画面截图\",\"CNSL_SS_CLS\":\"关闭\",\"CNSL_PPOT\":\"弹出播放视频\",\"CNSL_FLBR\":\"网页全屏模式\",\"CNSL_CINM_MD\":\"影院模式\",\"CNSL_YTSC\":\"YouTube 快捷键列表\",\"PLST_AP\":\"自动播放\",\"PLST_RVRS\":\"倒序排列\",\"SHOW_CMTS\":\"显示评论\",\"HIDE_CMTS\":\"隐藏评论\",\"GLB_IMPR\":\"导入/导出设置\",\"GLB_LOCL_LANG\":\"点击修改 YT+ 语言\",\"GLB_LOCL_LANG_CSTM\":\"本地化\",\"GLB_IMPR_SAVE\":\"保存并加载\",\"GLB_RSET\":\"重置\",\"GLB_RSET_CONF\":\"这将重置YT+的所有设置和黑名单。是否要继续？\",\"GLB_SVE\":\"保存\",\"GLB_SVE_SETS\":\"设置已保存\",\"GLB_RMBL\":\"从黑名单中移除\",\"FTR_DESC\":\"详细了解\",\"GEN\":\"常规\",\"VID\":\"视频\",\"CHN\":\"频道\",\"BLK\":\"黑名单\",\"ABT\":\"关于\",\"HLP\":\"帮助\",\"DNT\":\"捐赠\",\"GEN_TTL\":\"通用设置\",\"GEN_GEN\":\"常规\",\"GEN_LYT\":\"布局\",\"GEN_LOCL_LANG\":\"使用自定义的 YT+ 语言包\",\"GEN_PPOT_ON\":\"启用弹出模式\",\"GEN_DSBL_ADS\":\"禁止视频页面以外的广告\",\"GEN_INF_SCRL\":\"在信息源列表启用无限滚动\",\"GEN_YT_LOGO_LINK\":\"YouTube 标志重定向到订阅页\",\"GEN_SUB_LIST\":\"启用订阅播放列表\",\"GEN_REM_APUN\":\"去除自动播放下一个\",\"GEN_SPF_OFF\":\"禁用动态加载\",\"GEN_HIDE_FTR\":\"隐藏页脚\",\"GEN_BLUE_GLOW\":\"去除点击过的按钮周围的蓝色光圈\",\"GEN_HDE_RECM_SDBR\":\"隐藏推荐频道侧边栏\",\"GEN_HDE_SRCH_SDBR\":\"隐藏搜索结果侧边栏\",\"GEN_HDE_CHN_SDBR\":\"隐藏频道侧边栏\",\"GEN_CMPT_TTLS\":\"在信息源中使用缩略标题\",\"GEN_DSB_HVRC\":\"禁用悬停卡片\",\"GEN_BTTR_NTF\":\"改进的蓝色通知框\",\"GEN_GRID_SUBS\":\"在订阅中使用网格布局\",\"GEN_GRID_SRCH\":\"在搜索结果中使用网格布局\",\"VID_TTL\":\"视频设置\",\"VID_PLR\":\"播放器设置\",\"VID_PLR_LYT\":\"播放器布局\",\"VID_DFLT_QLTY\":\"默认视频质量：\",\"VID_DFLT_QLTY_AUTO\":\"自动\",\"VID_DFLT_QLTY_TNY\":\"144p\",\"VID_DFLT_QLTY_SML\":\"240p\",\"VID_DFLT_QLTY_MDM\":\"360p\",\"VID_DFLT_QLTY_LRG\":\"480p\",\"VID_DFLT_QLTY_720\":\"720p\",\"VID_DFLT_QLTY_1080\":\"1080p\",\"VID_DFLT_QLTY_1440\":\"1440p\",\"VID_DFLT_QLTY_2160\":\"2160p (4k)\",\"VID_DFLT_QLTY_2880\":\"2880p (5k)\",\"VID_DFLT_QLTY_ORIG\":\"4320p (8k)\",\"VID_PLR_ALVIS\":\"阅读评论时保持播放器可见\",\"VID_PLR_ALVIS_WDTH\":\"悬浮播放器宽度\",\"VID_PLR_ALVIS_RST\":\"重设位置\",\"VID_PLR_ALVIS_SCRL_TOP\":\"返回顶部\",\"VID_PLR_ATPL\":\"自动播放视频\",\"VID_LAYT\":\"布局\",\"VID_VID_CNT\":\"显示已上传视频数及链接\",\"VID_POST_TIME\":\"显示视频已发布时间\",\"VID_HIDE_DETLS\":\"隐藏视频详细信息\",\"VID_HIDE_COMS\":\"评论区\",\"VID_HIDE_COMS_SHOW\":\"显示\",\"VID_HIDE_COMS_HIDE\":\"隐藏\",\"VID_HIDE_COMS_REM\":\"去除\",\"VID_END_SHRE\":\"禁用视频结束时的分享面板\",\"VID_PLST\":\"播放列表\",\"VID_PLST_ATPL\":\"启用播放列表的自动播放按钮\",\"VID_PLST_RVRS\":\"启用播放列表的倒序排列按钮\",\"VID_PLR_SIZE_MEM\":\"记住播放模式\",\"VID_VOL_WHEEL\":\"使用鼠标滚轮更改音量\",\"VID_PLR_VOL_MEM\":\"记住音量\",\"VID_PLR_VOL_LDN\":\"禁用 YouTube 响度统一化\",\"VID_PLR_ADS\":\"禁用视频页面中的广告\",\"VID_PLR_ALACT\":\"播放器快捷键始终生效\",\"VID_SUB_ADS\":\"仅启用已订阅频道中视频的广告\",\"VID_PLR_ANTS\":\"禁用注释\",\"VID_PLR_HFR\":\"禁用高帧率 (60fps)\",\"VID_PLR_HTML5\":\"可能时使用 HTML 5 播放器\",\"VID_PLR_CC\":\"禁用字幕和隐藏式字幕\",\"VID_PLR_INFO\":\"启用稍后观看按钮\",\"VID_PLR_FIT\":\"为剧场模式适配页面\",\"VID_PLR_FIT_WDTH\":\"适配页面最大宽度:\",\"VID_PLR_DYN_SIZE\":\"默认视图中禁用播放器动态调节尺寸\",\"VID_DESC_SHRT\":\"小巧的视频描述按钮\",\"VID_TTL_CMPT\":\"缩略视频描述标题\",\"VID_PPOT_SZ\":\"弹出播放器的大小\",\"VID_LAYT_AUTO_PNL\":\"自动展开视频描述\",\"GEN_CHN_DFLT_PAGE\":\"默认的频道页面：\",\"GEN_CHN_DFLT_PAGE_DFLT\":\"默认\",\"GEN_CHN_DFLT_PAGE_VID\":\"视频\",\"GEN_CHN_DFLT_PAGE_PL\":\"播放列表\",\"GEN_CHN_DFLT_PAGE_CHN\":\"频道\",\"GEN_CHN_DFLT_PAGE_DISC\":\"讨论\",\"GEN_CHN_DFLT_PAGE_ABT\":\"关于\",\"BLK_TTL\":\"黑名单设置\",\"BLK_BLK\":\"黑名单\",\"BLK_ON\":\"启用黑名单\",\"ABT_TTL\":\"相关信息和实用链接\",\"ABT_THKS\":\"鸣谢：\",\"ABT_THKS_YEPPHA\":\"，他们的成果给此项目带来了灵感，没有他们，今天这些就不会存在。\",\"ABT_THKS_USERSCRIPT\":\" 使开发和发行第三方软件的任务无比简单。\",\"ABT_THKS_STACKOV\":\" 无价的信息对软件开发做出了巨大贡献。\",\"ABT_INFO\":\"官方页面\",\"ABT_LNK_GHB\":\"GitHub\",\"ABT_LNK_GRFK\":\"Greasy Fork\",\"ABT_LNK_OPNU\":\"OpenUserJS\",\"WLCM\":\"感谢您安装 YouTube+\",\"WLCMSTRT\":\"您可以点击上面的按钮来自定义您的设置\",\"WLCMFTRS\":\"点击这里查看所有特性的介绍\",\"LOCALE\":\"中文 (简体)\",\"lastMod\":1480553355000},\"nextCheck\":1481160585881},\"GEN_HDE_CHN_SDBR\":false,\"GEN_HDE_SRCH_SDBR\":false,\"GEN_HDE_RECM_SDBR\":false,\"GEN_HIDE_FTR\":false,\"GEN_CMPT_TTLS\":false,\"GEN_DSB_HVRC\":false,\"GEN_GRID_SRCH\":false,\"GEN_GRID_SUBS\":false,\"GEN_CHN_DFLT_PAGE\":\"default\",\"GEN_SPF_OFF\":false,\"GEN_REM_APUN\":false,\"GEN_YT_LOGO_LINK\":false,\"GEN_DSBL_ADS\":false,\"GEN_LOCL_LANG\":false,\"lightsOut\":true,\"fullBrs\":true}"},"ts":1480574353803},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/9932-youtube/code/YouTube%20+.user.js","uuid":"44276438-6a2d-40cf-a78d-7b12d9f15d96","source":""},{"name":"Kill Baidu AD","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http*://www.baidu.com/*","http*://m.baidu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-body","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1480555659299,"data":{}},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/24192-kill-baidu-ad/code/Kill%20Baidu%20AD.user.js","uuid":"914a0f0b-d382-4e40-b236-a7bda484b3b3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICAgICBLaWxsIEJhaWR1IEFECi8vIEBuYW1lOnpoLUNOICAgICAgICAg55m+5bqm5bm/5ZGKKOmmluWwvuaOqOW5v+WPiuWPs+S+p+W5v+WRiinmuIXnkIYKLy8gQG5hbWVzcGFjZSAgICAgICAgICBob290aGluCi8vIEB2ZXJzaW9uICAgICAgICAgICAgMC42Ci8vIEBkZXNjcmlwdGlvbiAgICAgICAgSnVzdCBLaWxsIEJhaWR1IEFECi8vIEBkZXNjcmlwdGlvbjp6aC1DTiAg5b275bqV5riF55CG55m+5bqm5pCc57SiKHd3dy5iYWlkdS5jb20p57uT5p6c6aaW5bC+55qE5o6o5bm/5bm/5ZGK44CB5LqM5qyh6aG95Zu65bm/5ZGK5LiO5Y+z5L6n5bm/5ZGK77yM5bm26Ziy5q2i5Y+N5aSNCi8vIEBhdXRob3IgICAgICAgICAgICAgaG9vdGhpbgovLyBAaW5jbHVkZSAgICAgICAgICAgIGh0dHAqOi8vd3d3LmJhaWR1LmNvbS8qCi8vIEBpbmNsdWRlICAgICAgICAgICAgaHR0cCo6Ly9tLmJhaWR1LmNvbS8qCi8vIEBncmFudCAgICAgICAgICAgICAgbm9uZQovLyBAcnVuLWF0ICAgICAgICAgICAgIGRvY3VtZW50LWJvZHkKLy8gQGxpY2Vuc2UgICAgICAgICAgICBNSVQgTGljZW5zZQovLyBAY29tcGF0aWJsZSAgICAgICAgIGNocm9tZSDmtYvor5XpgJrov4cKLy8gQGNvbXBhdGlibGUgICAgICAgICBmaXJlZm94IOa1i+ivlemAmui/hwovLyBAY29tcGF0aWJsZSAgICAgICAgIG9wZXJhIOacqua1i+ivlQovLyBAY29tcGF0aWJsZSAgICAgICAgIHNhZmFyaSDmnKrmtYvor5UKLy8gQGNvbnRyaWJ1dGlvblVSTCAgICBodHRwczovL3d3dy5wYXlwYWwuY29tL2NnaS1iaW4vd2Vic2NyP2NtZD1fZG9uYXRpb25zJmJ1c2luZXNzPXJpeGl4aUBzaW5hLmNvbSZpdGVtX25hbWU9R3JlYXN5K0ZvcmsrZG9uYXRpb24KLy8gQGNvbnRyaWJ1dGlvbkFtb3VudCAxCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgdmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuTW96TXV0YXRpb25PYnNlcnZlcjsKICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKHJlY29yZHMpewogICAgICAgIGNsZWFyQUQoKTsKICAgIH0pOwogICAgdmFyIG9wdGlvbiA9IHsKICAgICAgICAnY2hpbGRMaXN0JzogdHJ1ZSwKICAgICAgICAnc3VidHJlZSc6IHRydWUKICAgIH07CiAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIG9wdGlvbik7CgogICAgZGVsTW9iaWxlQUQoKTsKCiAgICBmdW5jdGlvbiBkZWxNb2JpbGVBRCgpewogICAgICAgIHZhciBtQWRzPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIi5lY193aXNlX2FkLC5lY195b3V4dWFuX2NhcmQiKTsKICAgICAgICBmb3IodmFyIGk9MDtpPG1BZHMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIHZhciBtQWQ9bUFkc1tpXTsKICAgICAgICAgICAgbUFkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobUFkKTsKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gY2xlYXJBRCgpewogICAgICAgIGRlbE1vYmlsZUFEKCk7CiAgICAgICAgdmFyIGxpc3Q9ZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yQWxsKCIjY29udGVudF9sZWZ0PmRpdiwjY29udGVudF9sZWZ0PnRhYmxlIiksaTsKICAgICAgICBmb3IoaT0wO2k8bGlzdC5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgbGV0IGl0ZW0gPSBsaXN0W2ldOwogICAgICAgICAgICBsZXQgcyA9IGl0ZW0uZ2V0QXR0cmlidXRlKCJzdHlsZSIpOwogICAgICAgICAgICBpZiAocyAmJiAvZGlzcGxheToodGFibGV8YmxvY2spXHMhaW1wb3J0YW50Ly50ZXN0KHMpKSB7CiAgICAgICAgICAgICAgICBpdGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaXRlbSk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgdmFyIHNwYW49aXRlbS5xdWVyeVNlbGVjdG9yKCJkaXY+c3BhbiIpOwogICAgICAgICAgICAgICAgaWYoc3BhbiAmJiBzcGFuLmlubmVySFRNTD09IuW5v+WRiiIpewogICAgICAgICAgICAgICAgICAgIGl0ZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpdGVtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIGViID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiI2NvbnRlbnRfcmlnaHQ+dGFibGU+dGJvZHk+dHI+dGQ+ZGl2Iik7CiAgICAgICAgZm9yKGk9MDtpPGViLmxlbmd0aDtpKyspewogICAgICAgICAgICBsZXQgZCA9IGViW2ldOwogICAgICAgICAgICBpZiAoZC5pZCE9ImNvbi1hciIpIHsKICAgICAgICAgICAgICAgIGQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfSkoKTs="},{"name":"Douban Movie Download Search Modify by Louis","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["https://movie.douban.com/subject/*","http://movie.douban.com/subject/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1480556011959,"data":{}},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/8261-douban-movie-download-search-modify-by-louis/code/Douban%20Movie%20Download%20Search%20Modify%20by%20Louis.user.js","uuid":"e220f0c4-7474-492e-b2dd-0a9799ce8e13","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIERvdWJhbiBNb3ZpZSBEb3dubG9hZCBTZWFyY2ggTW9kaWZ5IGJ5IExvdWlzCi8vIEBuYW1lc3BhY2UgICAgICBodHRwczovL2dyZWFzeWZvcmsub3JnL3poLUNOL3NjcmlwdHMvODI2MS1kb3ViYW4tbW92aWUtZG93bmxvYWQtc2VhcmNoLW1vZGlmeS1ieS1sb3VpcwovLyBAZGVzY3JpcHRpb24gICAg5Zyo6LGG55Oj55S15b2x6aG16Z2i5re75Yqg6LWE5rqQ5pCc57Si6ZO+5o6l44CCCi8vIEB2ZXJzaW9uICAgICAgICAwLjIwMTUwNTExCi8vIEBpbmNsdWRlICAgICAgICBodHRwczovL21vdmllLmRvdWJhbi5jb20vc3ViamVjdC8qCi8vIEBpbmNsdWRlICAgICAgICBodHRwOi8vbW92aWUuZG91YmFuLmNvbS9zdWJqZWN0LyoKLy8gQGdyYW50ICAgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgpmdW5jdGlvbiBhZGRKUXVlcnkoY2FsbGJhY2spIHsKICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTsKICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoInNyYyIsICJhYm91dDpibGFuayIpOwogICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgICAgIHNjcmlwdC50ZXh0Q29udGVudCA9ICIoIiArIGNhbGxiYWNrLnRvU3RyaW5nKCkgKyAiKSgpOyI7CiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpOwogICAgfSwgZmFsc2UpOwogICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpOwp9CgpmdW5jdGlvbiBtYWluKCkgewogICAgdHJ5IHsKICAgIAl2YXIgbW92aWVUaXRsZSA9IGpRdWVyeSgnaDEgc3BhbjplcSgwKScpLnRleHQoKTsKCQl2YXIgdGl0bGUgPSAkKCdodG1sIGhlYWQgdGl0bGUnKS50ZXh0KCk7CgkgICAgdmFyIGtleXdvcmQxID0gdGl0bGUucmVwbGFjZSggJyjosYbnk6MpJywgJycgKS50cmltKCk7CgkgICAgdmFyIGtleXdvcmQyID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXl3b3JkMSApOwoJCWpRdWVyeSgnI2luZm8nKS5hcHBlbmQoJzxkaXY+PHNwYW4gY2xhc3M9InBsIj7kuIvovb06PC9zcGFuPiA8YSBocmVmPSJodHRwOi8vd3d3LmJhaWR1LmNvbS9zP3dkPScgKyBtb3ZpZVRpdGxlICsgJytCRHJpcCIgdGFyZ2V0PSJfYmFsbmsiPuWcqEJhaWR15LiK5pCc57SiPC9hPiAvICA8YSBocmVmPSJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9pZT1VVEYtOCZxPScgKyBtb3ZpZVRpdGxlICsgJyt0b3JyZW50IiB0YXJnZXQ9Il9iYWxuayI+5ZyoR29vZ2xl5LiK5pCc57SiPC9hPiAvIDxhIGhyZWY9Imh0dHA6Ly9zZWFyY2gubXRpbWUuY29tL3NlYXJjaC8/cT0nICsga2V5d29yZDIgKyAnIiB0YXJnZXQ9Il9iYWxuayI+5pe25YWJPC9hPiAvIDxhIGhyZWY9Imh0dHA6Ly93d3cuemltdXp1LnR2L3NlYXJjaC9pbmRleD9rZXl3b3JkPScgKyBrZXl3b3JkMiArICcmc2VhcmNoX3R5cGU9IiB0YXJnZXQ9Il9iYWxuayI+WmltdXp1PC9hPiAvIDxhIGhyZWY9Imh0dHA6Ly90b3JyZW50ei5ldS9zZWFyY2g/Zj0nICsgbW92aWVUaXRsZSArICciIHRhcmdldD0iX2JhbG5rIj5Ub3JyZW50ejwvYT4gLyA8YSBocmVmPSJodHRwOi8vc2ltcGxlY2QubWUvc2VhcmNoL2VudHJ5Lz9xdWVyeT0nICsga2V5d29yZDEgKyAnIiB0YXJnZXQ9Il9iYWxuayI+U2ltcGxlQ0Q8L2E+IC8gPGEgaHJlZj0iaHR0cDovL3RvcnJlbnRwcm9qZWN0LmNvbS8/dD0nICsgbW92aWVUaXRsZSArICciIHRhcmdldD0iX2JhbG5rIj5Ub3JyZW50UHJvamVjdDwvYT4gLyA8YSBocmVmPSJodHRwOi8vYnRkaWdnLm9yZy9zZWFyY2g/aW5mb19oYXNoPSZxPScgKyBtb3ZpZVRpdGxlICsgJyIgdGFyZ2V0PSJfYmFsbmsiPkJURGlnZzwvYT4gLyA8YSBocmVmPSJodHRwOi8vd3d3LnRvcnJlbnRraXR0eS5jb20vc2VhcmNoLycgKyBtb3ZpZVRpdGxlICsgJyIgdGFyZ2V0PSJfYmFsbmsiPlRvcnJlbnRLaXR0eTwvYT4gLyA8YSBocmVmPSJodHRwOi8vYmFueXVuZ29uZy5uZXQvc2VhcmNoLycgKyBrZXl3b3JkMiArICcrLmh0bWwiIHRhcmdldD0iX2JhbG5rIj7mkKzov5Dlt6U8L2E+PGJyPjxzcGFuIGNsYXNzPSJwbCI+5a2X5bmVOjwvc3Bhbj4gPGEgaHJlZj0iaHR0cDovL3N1YmhkLmNvbS9zZWFyY2gvJyArIG1vdmllVGl0bGUgKyAnIiB0YXJnZXQ9Il9iYWxuayI+U3ViIEhEPC9hPiAvIDxhIGhyZWY9Imh0dHA6Ly93d3cuemltdWt1Lm5ldC9zZWFyY2g/cT0nICsgbW92aWVUaXRsZSArICciIHRhcmdldD0iX2JhbG5rIj5aaW11a3U8L2E+IC8gPGEgaHJlZj0iaHR0cDovL3d3dy5zdWJvbS5uZXQvc2VhcmNoLycgKyBtb3ZpZVRpdGxlICsgJyIgdGFyZ2V0PSJfYmFsbmsiPlN1Ym9tPC9hPiAvIDxhIGhyZWY9Imh0dHA6Ly93d3cub3BlbnN1YnRpdGxlcy5vcmcvemgvc2VhcmNoMi9zdWJsYW5ndWFnZWlkLWNoaS9tb3ZpZW5hbWUtJyArIG1vdmllVGl0bGUgKyAnIiB0YXJnZXQ9Il9iYWxuayI+T3BlblN1YnM8L2E+IC8gPGEgaHJlZj0iaHR0cDovL3Nob290ZXIuY24vc2VhcmNoLycgKyBtb3ZpZVRpdGxlICsgJyIgdGFyZ2V0PSJfYmFsbmsiPlNob290ZXI8L2E+PGRpdj4nKTsKICAgIH0KICAgIGNhdGNoIChlKSB7IH0KfQphZGRKUXVlcnkobWFpbik7"},{"name":"网盘提取工具","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1480567516488,"data":{}},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/18733-%E7%BD%91%E7%9B%98%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7/code/%E7%BD%91%E7%9B%98%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7.user.js","uuid":"232e3252-cbb6-40c0-916a-c58aa0a26eae","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDnvZHnm5jmj5Dlj5blt6XlhbcKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vd3d3LmZpc2hsZWUubmV0LwovLyBAdmVyc2lvbiAgICAgIDIuNAovLyBAZGVzY3JpcHRpb24gIOWwveWPr+iDveWcqOaUr+aMgeeahOe9keebmO+8iOaWsOa1quW+ruebmOOAgeeZvuW6pue9keebmOOAgTM2MOS6keebmOetie+8ieiHquWKqOi+k+WFpeaPkOWPluegge+8jOecgeWOu+S4i+i9veeahOeDpuaBvOOAggovLyBAYXV0aG9yICAgICAgIOacqOmxvChpRmlzaCkKLy8gQG1hdGNoICAgICAgICAqOi8vKi8qCi8vIEBncmFudCAgICAgICAgdW5zYWZlV2luZG93Ci8vID09L1VzZXJTY3JpcHQ9PQooZnVuY3Rpb24od2luZG93LCBzZWxmLCB1bnNhZmVXaW5kb3cpIHsKICAgICd1c2Ugc3RyaWN0JzsKICAgIHZhciB0aW1lU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgIHZhciBsb2NhdGlvbiA9IHNlbGYubG9jYXRpb247CiAgICB2YXIgaG9zdCA9IGxvY2F0aW9uLmhvc3Q7CiAgICB2YXIgcGF0aCA9IGxvY2F0aW9uLnBhdGhuYW1lOwogICAgdmFyIGNvZGUsIGlucHV0OwogICAgdmFyIGdldENvZGUgPSBmdW5jdGlvbihydWxlKSB7CiAgICAgICAgY29kZSA9IGxvY2F0aW9uLmhhc2guc2xpY2UoMSwgNSk7CiAgICAgICAgaWYgKChydWxlIHx8IC8oW2EtelxkXXs0fSkvaS5leGVjKGNvZGUpKSkgewogICAgICAgICAgICBjb2RlID0gUmVnRXhwLiQxOwogICAgICAgIH0gZWxzZSBjb2RlID0gbnVsbDsKICAgICAgICByZXR1cm4gY29kZTsKICAgIH07CiAgICBpZiAoKGhvc3QgPT09ICdwYW4uYmFpZHUuY29tJyB8fCBob3N0ID09PSAneXVuLmJhaWR1LmNvbScpKSB7CiAgICAgICAgLy/nmb7luqbkupHnm5gKICAgICAgICBpZiAocGF0aC5pbmRleE9mKCIvc2hhcmUvIikgIT09IC0xICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhY2Nlc3NDb2RlIikgJiYgZ2V0Q29kZSgpKSB7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJhY2Nlc3NDb2RlIikudmFsdWUgPSBjb2RlOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic3VibWl0QnRuIikuY2xpY2soKTsKICAgICAgICB9CiAgICB9IGVsc2UgaWYgKC9eLipcLnl1bnBhblwuY24kL2kudGVzdChob3N0KSkgewogICAgICAgIC8vMzYw5LqR55uYCiAgICAgICAgaWYgKHNlbGYubG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZigiL2xrLyIpICE9PSAtMSkgewogICAgICAgICAgICBpbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImlucHV0LnB3ZC1pbnB1dCIpOwogICAgICAgICAgICBpZiAoZ2V0Q29kZSgpICYmIGlucHV0KSB7CiAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGNvZGU7CiAgICAgICAgICAgICAgICBpbnB1dC5uZXh0RWxlbWVudFNpYmxpbmcuY2xpY2soKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgICAgLy/lhbblroPnvZHnq5nvvIzmo4DmtYvpk77mjqUKICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJhW2hyZWYqPSdwYW4uYmFpZHUuY29tJ10sIGFbaHJlZio9J3l1bnBhbi5jbiddLCBhW2hyZWYqPSd2ZGlzay53ZWliby5jb20nXSIpKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmspIHsKICAgICAgICAgICAgdmFyIHR4dCA9IGxpbmsubmV4dFNpYmxpbmcgJiYgbGluay5uZXh0U2libGluZy5ub2RlVmFsdWU7CiAgICAgICAgICAgIHZhciBsaW5rY29kZSA9IC/noIEuKj8oW2EtelxkXXs0fSkvaS5leGVjKHR4dCkgJiYgUmVnRXhwLiQxOwogICAgICAgICAgICBpZiAoIWxpbmtjb2RlKSB7CiAgICAgICAgICAgICAgICB0eHQgPSBsaW5rLnBhcmVudE5vZGUuaW5uZXJUZXh0OwogICAgICAgICAgICAgICAgbGlua2NvZGUgPSAv56CBLio/KFthLXpcZF17NH0pL2kuZXhlYyh0eHQpICYmIFJlZ0V4cC4kMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobGlua2NvZGUpIHsKICAgICAgICAgICAgICAgIHZhciBocmVmID0gbGluay5nZXRBdHRyaWJ1dGUoImhyZWYiKTsKICAgICAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCJocmVmIiwgaHJlZiArICIjIiArIGxpbmtjb2RlKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQogICAgdmFyIHRpbWVFbmQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgIGNvbnNvbGUubG9nKCJb572R55uY5o+Q5Y+W5bel5YW3XSDpk77mjqXlpITnkIblrozmiJDvvIzogJfml7bvvJoiICsgKHRpbWVFbmQgLSB0aW1lU3RhcnQpICsgIuavq+enki4g5aSE55CG5qih5byP77yaRE9N5aSE55CGIik7Cn0pKHdpbmRvdywgd2luZG93LnNlbGYsIHVuc2FmZVdpbmRvdyk7CihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKICAgIC8vY29uc3RzLi4uCiAgICB2YXIgQ09ERV9SVUxFX0JBSURVID0gL14oW2EtelxkXXs0fSkkL2k7CiAgICB2YXIgQ09ERV9SVUxFX1lVTlBBTiA9IC9eKFthLXpcZF17NH0pJC9pOwogICAgdmFyIE1BWF9TRUFSQ0hfQ09ERV9SQU5HRSA9IDU7CiAgICAvL2Z1bmN0aW9ucy4uLgogICAgdmFyIHRleHROb2Rlc1VuZGVyID0gZnVuY3Rpb24oZWwpIHsKICAgICAgICB2YXIgbiwgYSA9IFtdLAogICAgICAgICAgICB3YWxrID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihlbCwgTm9kZUZpbHRlci5TSE9XX1RFWFQsIG51bGwsIGZhbHNlKTsKICAgICAgICB3aGlsZSAoKG4gPSB3YWxrLm5leHROb2RlKCkpKSBhLnB1c2gobik7CiAgICAgICAgcmV0dXJuIGE7CiAgICB9OwogICAgdmFyIGdlbmVyYWxMaW5raWZ5VGV4dCA9IGZ1bmN0aW9uKHRleHQsIGVsZXMsIGluZGV4LCB0ZXN0UmVnLCB2YWxpZGF0ZVJ1bGUpIHsKICAgICAgICB2YXIgbG9vcENvdW50ID0gMCwKICAgICAgICAgICAgb3JpZ2luYWxUZXh0LCBjb2RlLCBtYXRjaCwgdXJsLAogICAgICAgICAgICBsaW5raWZpZWRUZXh0ID0gdGV4dDsKICAgICAgICB3aGlsZSAoKG1hdGNoID0gdGVzdFJlZy5leGVjKHRleHQpKSkgewogICAgICAgICAgICBsb29wQ291bnQrKzsKICAgICAgICAgICAgdXJsID0gKG1hdGNoWzFdIHx8ICJodHRwOi8vIikgKyBtYXRjaFsyXTsKICAgICAgICAgICAgb3JpZ2luYWxUZXh0ID0gbWF0Y2hbMV0gKyBtYXRjaFsyXTsKICAgICAgICAgICAgY29kZSA9IG1hdGNoWzNdIHx8IGZpbmRDb2RlRnJvbUVsZW1lbnRzKGVsZXMsIGluZGV4LCB2YWxpZGF0ZVJ1bGUpIHx8ICIiOwogICAgICAgICAgICBjb25zb2xlLmxvZygiW+e9keebmOaPkOWPluW3peWFt10g5bey5aSE55CG572R55uY5Zyw5Z2A77yMVVJMPSIgKyB1cmwgKyAi77yM5o+Q5Y+W56CBPSIgKyBjb2RlICsgIuaooeW8j++8mlRFWFROT0RFIik7CiAgICAgICAgICAgIGxpbmtpZmllZFRleHQgPSBsaW5raWZpZWRUZXh0LnJlcGxhY2Uob3JpZ2luYWxUZXh0LCAiPGEgaHJlZj0nIiArIHVybCArICIjIiArIGNvZGUgKyAiJyB0YXJnZXQ9J19ibGFuayc+IiArIHVybCArICc8L2E+Jyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBbbG9vcENvdW50LCBsaW5raWZpZWRUZXh0XTsKICAgIH07CiAgICB2YXIgbGlua2lmeVRleHRCbG9ja0JhaWR1ID0gZnVuY3Rpb24odGV4dCwgZWxlcywgaW5kZXgpIHsKICAgICAgICByZXR1cm4gZ2VuZXJhbExpbmtpZnlUZXh0KHRleHQsIGVsZXMsIGluZGV4LCAvKGh0dHA6XC9cLyk/KCg/OnBhbnx5dW4pXC5iYWlkdVwuY29tXC9zXC8oPzpbYS16XGRdKykpKD86Lio/56CBLio/KFthLXpcZF0rKSk/L2dpLCBDT0RFX1JVTEVfQkFJRFUpOwogICAgfTsKICAgIHZhciBsaW5raWZ5VGV4dEJsb2NrWXVucGFuID0gZnVuY3Rpb24odGV4dCwgZWxlcywgaW5kZXgpIHsKICAgICAgICByZXR1cm4gZ2VuZXJhbExpbmtpZnlUZXh0KHRleHQsIGVsZXMsIGluZGV4LCAvKGh0dHA6XC9cLyk/KHl1bnBhblwuY25cLyg/OlthLXpcZF0rKSkoPzouKj/noIEuKj8oW2EtelxkXSspKT8vZ2ksIENPREVfUlVMRV9ZVU5QQU4pOwogICAgfTsKICAgIHZhciBmaW5kQ29kZUZyb21FbGVtZW50cyA9IGZ1bmN0aW9uKGVsZXMsIGluZGV4LCBydWxlKSB7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBNQVhfU0VBUkNIX0NPREVfUkFOR0UgJiYgaSA8IGVsZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIHR4dCA9IGVsZXNbaSArIGluZGV4XS50ZXh0Q29udGVudDsKICAgICAgICAgICAgdmFyIGNvZGVSZWcgPSAv56CBLio/KFthLXpcZF0rKS9naTsKICAgICAgICAgICAgdmFyIGNvZGVNYXRjaCA9IGNvZGVSZWcuZXhlYyh0ZXh0KSAmJiBSZWdFeHAuJDE7CiAgICAgICAgICAgIGlmICghY29kZU1hdGNoKSBjb250aW51ZTsKICAgICAgICAgICAgdmFyIGxpbmtUZXN0UmVnID0gLyhodHRwcz86fFwuKG5ldHxjbnxjb218Z292fGNjfG1lKSkvZ2k7CiAgICAgICAgICAgIGlmIChsaW5rVGVzdFJlZy5leGVjKHR4dCkgJiYgbGlua1Rlc3RSZWcubGFzdEluZGV4IDw9IGNvZGVSZWcubGFzdEluZGV4KSB7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocnVsZS50ZXN0KGNvZGVNYXRjaCkpIHJldHVybiBjb2RlTWF0Y2g7CiAgICAgICAgfQogICAgICAgIHJldHVybiBudWxsOwogICAgfTsKICAgIHZhciBsaW5raWZ5ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGVsZXMgPSB0ZXh0Tm9kZXNVbmRlcihkb2N1bWVudC5ib2R5KTsKICAgICAgICB2YXIgZWxlLCB0eHQsIGxvb3BDb3VudDsKICAgICAgICB2YXIgcHJvY2Vzc29yID0gWwogICAgICAgICAgICBsaW5raWZ5VGV4dEJsb2NrQmFpZHUKICAgICAgICBdOwogICAgICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKGZ1bikgewogICAgICAgICAgICB2YXIgZGF0YSA9IGZ1bih0eHQsIGVsZXMsIGkgKyAxKTsKICAgICAgICAgICAgbG9vcENvdW50ICs9IGRhdGFbMF07CiAgICAgICAgICAgIHR4dCA9IGRhdGFbMV07CiAgICAgICAgfTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgZWxlID0gZWxlc1tpXTsKICAgICAgICAgICAgaWYgKGVsZS5wYXJlbnROb2RlLnRhZ05hbWUgPT0gJ2EnKSBjb250aW51ZTsKICAgICAgICAgICAgdHh0ID0gZWxlLnRleHRDb250ZW50OwogICAgICAgICAgICBsb29wQ291bnQgPSAwOwogICAgICAgICAgICBwcm9jZXNzb3IuZm9yRWFjaChjYWxsYmFjayk7CiAgICAgICAgICAgIGlmIChsb29wQ291bnQgPiAwKSB7CiAgICAgICAgICAgICAgICB2YXIgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICAgICAgICAgICAgICAgIHNwYW4uaW5uZXJIVE1MID0gdHh0OwogICAgICAgICAgICAgICAgZWxlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHNwYW4sIGVsZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9OwogICAgdmFyIHRpbWVTdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgbGlua2lmeSgpOwogICAgdmFyIHRpbWVFbmQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgIGNvbnNvbGUubG9nKCJb572R55uY5o+Q5Y+W5bel5YW3XSDpk77mjqXlpITnkIblrozmiJDvvIzogJfml7bvvJoiICsgKHRpbWVFbmQgLSB0aW1lU3RhcnQpICsgIuavq+enki4g5aSE55CG5qih5byP77yaVEVYVE5PREXlpITnkIYiKTsKfSkoKTs="},{"name":"Easy offline","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["http*://www.baidu.*","http*://www.google.*","http*://www.bing.*"],"orig_includes":["http*://*/*","http*://pan.baidu.com/*","http*://115.com/*","https://www.furk.net/*","https://www.seedr.cc/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1480567553156,"data":{}},"enabled":false,"position":8,"file_url":"https://greasyfork.org/scripts/22590-%E4%B8%80%E9%94%AE%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD/code/%E4%B8%80%E9%94%AE%E7%A6%BB%E7%BA%BF%E4%B8%8B%E8%BD%BD.user.js","uuid":"8ec03493-e608-464e-b8c9-497c429e31fb","source":""}]}